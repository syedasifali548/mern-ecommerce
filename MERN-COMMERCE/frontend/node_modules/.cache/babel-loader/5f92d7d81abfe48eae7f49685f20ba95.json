{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // Register User\n\nexport const register = () => {};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    currentUser: null,\n    isFetching: false,\n    isError: false,\n    isSuccess: false,\n    isLoading: false\n  },\n  reducers: {\n    loginStart: state => {\n      state.isFetching = true;\n      state.isLoading = true;\n    },\n    loginSuccess: (state, action) => {\n      state.isFetching = false;\n      state.currentUser = action.payload;\n      state.isSuccess = true;\n      state.isLoading = false;\n    },\n    loginFailure: state => {\n      state.isFetching = false;\n      state.isError = true;\n      state.isLoading = false;\n      state.isSuccess = false;\n    }\n  }\n});\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure\n} = userSlice.actions;\nexport default userSlice.reducer; // import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import {pubicRequest} from \"../requestMethods\";\n// // Get user from localStorage\n// const user = JSON.parse(localStorage.getItem(\"user\"));\n// const initialState = {\n//   user: user ? user : null,\n//   isError: false,\n//   isSuccess: false,\n//   isLoading: false,\n//   message: \"\",\n//   currentUser: null,\n//   isFetching: false,\n// };\n// // Register user\n// export const register = createAsyncThunk(\n//   \"auth/register\",\n//   async (user, thunkAPI) => {\n//     try {\n//       return await pubicRequest.register(user);\n//     } catch (error) {\n//       const message =\n//         (error.response &&\n//           error.response.data &&\n//           error.response.data.message) ||\n//         error.message ||\n//         error.toString();\n//       return thunkAPI.rejectWithValue(message);\n//     }\n//   }\n// );\n// // Login user\n// export const login = createAsyncThunk(\"auth/login\", async (user, thunkAPI) => {\n//   try {\n//     return await pubicRequest.login(user);\n//   } catch (error) {\n//     const message =\n//       (error.response && error.response.data && error.response.data.message) ||\n//       error.message ||\n//       error.toString();\n//     return thunkAPI.rejectWithValue(message);\n//   }\n// });\n// export const logout = createAsyncThunk(\"auth/logout\", async () => {\n//   await pubicRequest.logout();\n// });\n// export const userSlice = createSlice({\n//   name: \"user\",\n//   initialState,\n//   reducers: {\n//     reset: (state) => {\n//       state.isLoading = false;\n//       state.isSuccess = false;\n//       state.isError = false;\n//       state.message = \"\";\n//     },\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(register.pending, (state) => {\n//         state.isLoading = true;\n//       })\n//       .addCase(register.fulfilled, (state, action) => {\n//         state.isLoading = false;\n//         state.isSuccess = true;\n//         state.user = action.payload;\n//       })\n//       .addCase(register.rejected, (state, action) => {\n//         state.isLoading = false;\n//         state.isError = true;\n//         state.message = action.payload;\n//         state.user = null;\n//       })\n//       .addCase(login.pending, (state) => {\n//         state.isLoading = true;\n//       })\n//       .addCase(login.fulfilled, (state, action) => {\n//         state.isLoading = false;\n//         state.isSuccess = true;\n//         state.user = action.payload;\n//       })\n//       .addCase(login.rejected, (state, action) => {\n//         state.isLoading = false;\n//         state.isError = true;\n//         state.message = action.payload;\n//         state.user = null;\n//       })\n//       .addCase(logout.fulfilled, (state) => {\n//         state.user = null;\n//       });\n//   },\n// });\n// export const { reset } = userSlice.actions;\n// export default userSlice.reducer;","map":{"version":3,"sources":["E:/Assignments/React/mern-ecommerce/frontend/src/redux/userSlice.js"],"names":["createSlice","register","userSlice","name","initialState","currentUser","isFetching","isError","isSuccess","isLoading","reducers","loginStart","state","loginSuccess","action","payload","loginFailure","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAI,CAAE,CAAvB;AAEP,MAAMC,SAAS,GAAGF,WAAW,CAAC;AAC1BG,EAAAA,IAAI,EAAC,MADqB;AAE1BC,EAAAA,YAAY,EAAC;AACTC,IAAAA,WAAW,EAAG,IADL;AAETC,IAAAA,UAAU,EAAC,KAFF;AAGTC,IAAAA,OAAO,EAAE,KAHA;AAITC,IAAAA,SAAS,EAAE,KAJF;AAKTC,IAAAA,SAAS,EAAE;AALF,GAFa;AAS1BC,EAAAA,QAAQ,EAAC;AACLC,IAAAA,UAAU,EAAGC,KAAD,IAAW;AACnBA,MAAAA,KAAK,CAACN,UAAN,GAAmB,IAAnB;AACAM,MAAAA,KAAK,CAACH,SAAN,GAAkB,IAAlB;AACD,KAJE;AAKHI,IAAAA,YAAY,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC/BF,MAAAA,KAAK,CAACN,UAAN,GAAmB,KAAnB;AACAM,MAAAA,KAAK,CAACP,WAAN,GAAoBS,MAAM,CAACC,OAA3B;AACAH,MAAAA,KAAK,CAACJ,SAAN,GAAmB,IAAnB;AACAI,MAAAA,KAAK,CAACH,SAAN,GAAkB,KAAlB;AAED,KAXE;AAYHO,IAAAA,YAAY,EAAGJ,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACN,UAAN,GAAmB,KAAnB;AACAM,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACAK,MAAAA,KAAK,CAACH,SAAN,GAAkB,KAAlB;AACAG,MAAAA,KAAK,CAACJ,SAAN,GAAmB,KAAnB;AAED;AAlBE;AATiB,CAAD,CAA7B;AA+BA,OAAO,MAAM;AAACG,EAAAA,UAAD;AAAYE,EAAAA,YAAZ;AAAyBG,EAAAA;AAAzB,IAAyCd,SAAS,CAACe,OAAzD;AACP,eAAef,SAAS,CAACgB,OAAzB,C,CAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// Register User\r\nexport const register = ()=>{}\r\n\r\nconst userSlice = createSlice({\r\n    name:\"user\",\r\n    initialState:{\r\n        currentUser : null,\r\n        isFetching:false,\r\n        isError: false,\r\n        isSuccess: false,\r\n        isLoading: false,\r\n    },\r\n    reducers:{\r\n        loginStart: (state) => {\r\n            state.isFetching = true;\r\n            state.isLoading = true;\r\n          },\r\n          loginSuccess: (state, action) => {\r\n            state.isFetching = false;\r\n            state.currentUser = action.payload;\r\n            state.isSuccess =  true;\r\n            state.isLoading = false\r\n\r\n          },\r\n          loginFailure: (state) => {\r\n            state.isFetching = false;\r\n            state.isError = true;\r\n            state.isLoading = false;\r\n            state.isSuccess =  false;\r\n\r\n          },\r\n    },\r\n})\r\n\r\nexport const {loginStart,loginSuccess,loginFailure} = userSlice.actions;\r\nexport default userSlice.reducer;\r\n\r\n// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n// import {pubicRequest} from \"../requestMethods\";\r\n\r\n// // Get user from localStorage\r\n// const user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n// const initialState = {\r\n//   user: user ? user : null,\r\n//   isError: false,\r\n//   isSuccess: false,\r\n//   isLoading: false,\r\n//   message: \"\",\r\n//   currentUser: null,\r\n//   isFetching: false,\r\n// };\r\n\r\n// // Register user\r\n// export const register = createAsyncThunk(\r\n//   \"auth/register\",\r\n//   async (user, thunkAPI) => {\r\n//     try {\r\n//       return await pubicRequest.register(user);\r\n//     } catch (error) {\r\n//       const message =\r\n//         (error.response &&\r\n//           error.response.data &&\r\n//           error.response.data.message) ||\r\n//         error.message ||\r\n//         error.toString();\r\n//       return thunkAPI.rejectWithValue(message);\r\n//     }\r\n//   }\r\n// );\r\n\r\n// // Login user\r\n// export const login = createAsyncThunk(\"auth/login\", async (user, thunkAPI) => {\r\n//   try {\r\n//     return await pubicRequest.login(user);\r\n//   } catch (error) {\r\n//     const message =\r\n//       (error.response && error.response.data && error.response.data.message) ||\r\n//       error.message ||\r\n//       error.toString();\r\n//     return thunkAPI.rejectWithValue(message);\r\n//   }\r\n// });\r\n\r\n// export const logout = createAsyncThunk(\"auth/logout\", async () => {\r\n//   await pubicRequest.logout();\r\n// });\r\n\r\n// export const userSlice = createSlice({\r\n//   name: \"user\",\r\n//   initialState,\r\n//   reducers: {\r\n//     reset: (state) => {\r\n//       state.isLoading = false;\r\n//       state.isSuccess = false;\r\n//       state.isError = false;\r\n//       state.message = \"\";\r\n//     },\r\n//   },\r\n//   extraReducers: (builder) => {\r\n//     builder\r\n//       .addCase(register.pending, (state) => {\r\n//         state.isLoading = true;\r\n//       })\r\n//       .addCase(register.fulfilled, (state, action) => {\r\n//         state.isLoading = false;\r\n//         state.isSuccess = true;\r\n//         state.user = action.payload;\r\n//       })\r\n//       .addCase(register.rejected, (state, action) => {\r\n//         state.isLoading = false;\r\n//         state.isError = true;\r\n//         state.message = action.payload;\r\n//         state.user = null;\r\n//       })\r\n//       .addCase(login.pending, (state) => {\r\n//         state.isLoading = true;\r\n//       })\r\n//       .addCase(login.fulfilled, (state, action) => {\r\n//         state.isLoading = false;\r\n//         state.isSuccess = true;\r\n//         state.user = action.payload;\r\n//       })\r\n//       .addCase(login.rejected, (state, action) => {\r\n//         state.isLoading = false;\r\n//         state.isError = true;\r\n//         state.message = action.payload;\r\n//         state.user = null;\r\n//       })\r\n//       .addCase(logout.fulfilled, (state) => {\r\n//         state.user = null;\r\n//       });\r\n//   },\r\n// });\r\n\r\n// export const { reset } = userSlice.actions;\r\n// export default userSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}