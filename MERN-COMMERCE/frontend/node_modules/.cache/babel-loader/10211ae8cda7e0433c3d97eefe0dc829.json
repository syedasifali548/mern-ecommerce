{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\";\n// // Register User\n// export const register = ()=>{}\n// const userSlice = createSlice({\n//     name:\"user\",\n//     initialState:{\n//         currentUser : null,\n//         isFetching:false,\n//         isError: false,\n//         isSuccess: false,\n//         isLoading: false,\n//     },\n//     reducers:{\n//         loginStart: (state) => {\n//             state.isFetching = true;\n//             state.isLoading = true;\n//           },\n//           loginSuccess: (state, action) => {\n//             state.isFetching = false;\n//             state.currentUser = action.payload;\n//             state.isSuccess =  true;\n//             state.isLoading = false\n//           },\n//           loginFailure: (state) => {\n//             state.isFetching = false;\n//             state.isError = true;\n//             state.isLoading = false;\n//             state.isSuccess =  false;\n//           },\n//     },\n// })\n// export const {loginStart,loginSuccess,loginFailure} = userSlice.actions;\n// export default userSlice.reducer;\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { pubicRequest } from \"../requestMethods\"; // Get user from localStorage\n\nconst user = JSON.parse(localStorage.getItem(\"user\"));\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: \"\",\n  currentUser: null,\n  isFetching: false\n}; // Register user\n\nexport const register = createAsyncThunk(\"auth/register\", async (user, thunkAPI) => {\n  try {\n    return await pubicRequest.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Login user\n\nexport const login = createAsyncThunk(\"auth/login\", async (user, thunkAPI) => {\n  try {\n    return await pubicRequest.login(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\n  await pubicRequest.logout();\n});\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(logout.fulfilled, state => {\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["E:/Assignments/React/mern-ecommerce/frontend/src/redux/userSlice.js"],"names":["createSlice","createAsyncThunk","pubicRequest","user","JSON","parse","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","currentUser","isFetching","register","thunkAPI","error","response","data","toString","rejectWithValue","login","logout","userSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","authSlice","actions","reducer"],"mappings":"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","sourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// // Register User\r\n// export const register = ()=>{}\r\n\r\n// const userSlice = createSlice({\r\n//     name:\"user\",\r\n//     initialState:{\r\n//         currentUser : null,\r\n//         isFetching:false,\r\n//         isError: false,\r\n//         isSuccess: false,\r\n//         isLoading: false,\r\n//     },\r\n//     reducers:{\r\n//         loginStart: (state) => {\r\n//             state.isFetching = true;\r\n//             state.isLoading = true;\r\n//           },\r\n//           loginSuccess: (state, action) => {\r\n//             state.isFetching = false;\r\n//             state.currentUser = action.payload;\r\n//             state.isSuccess =  true;\r\n//             state.isLoading = false\r\n\r\n//           },\r\n//           loginFailure: (state) => {\r\n//             state.isFetching = false;\r\n//             state.isError = true;\r\n//             state.isLoading = false;\r\n//             state.isSuccess =  false;\r\n\r\n//           },\r\n//     },\r\n// })\r\n\r\n// export const {loginStart,loginSuccess,loginFailure} = userSlice.actions;\r\n// export default userSlice.reducer;\r\n\r\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport {pubicRequest} from \"../requestMethods\";\r\n\r\n// Get user from localStorage\r\nconst user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\nconst initialState = {\r\n  user: user ? user : null,\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: \"\",\r\n  currentUser: null,\r\n  isFetching: false,\r\n};\r\n\r\n// Register user\r\nexport const register = createAsyncThunk(\r\n  \"auth/register\",\r\n  async (user, thunkAPI) => {\r\n    try {\r\n      return await pubicRequest.register(user);\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Login user\r\nexport const login = createAsyncThunk(\"auth/login\", async (user, thunkAPI) => {\r\n  try {\r\n    return await pubicRequest.login(user);\r\n  } catch (error) {\r\n    const message =\r\n      (error.response && error.response.data && error.response.data.message) ||\r\n      error.message ||\r\n      error.toString();\r\n    return thunkAPI.rejectWithValue(message);\r\n  }\r\n});\r\n\r\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\r\n  await pubicRequest.logout();\r\n});\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.isLoading = false;\r\n      state.isSuccess = false;\r\n      state.isError = false;\r\n      state.message = \"\";\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(register.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(register.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(register.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        state.user = null;\r\n      })\r\n      .addCase(login.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        state.user = null;\r\n      })\r\n      .addCase(logout.fulfilled, (state) => {\r\n        state.user = null;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset } = authSlice.actions;\r\nexport default userSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}