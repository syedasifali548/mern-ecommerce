{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { json } from \"react-router-dom\"; // for get posts\n\nexport const getPost = createAsyncThunk('post/getPosts', async ({\n  id\n}) => {\n  return fetch(`https://jsonplaceholder.typicode.com/posts/${id}`).then(res => res.json());\n}); // For delete posts\n\nexport const deletePost = createAsyncThunk('post/deletePost', async ({\n  id\n}) => {\n  return fetch(`https://jsonplaceholder.typicode.com/posts/${id}`, {\n    method: 'DELETE'\n  }).then(res => res.json());\n}); // For delete Create Post\n\nexport const createPost = createAsyncThunk('post/createPost', async ({\n  values\n}) => {\n  return fetch(`https://jsonplaceholder.typicode.com/posts`, {\n    method: 'POST',\n    headers: {\n      Accept: \"application/json\",\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      title: values.title,\n      body: values.body\n    })\n  }).then(res => res.json());\n});\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState: {\n    post: [],\n    loading: false,\n    error: null,\n    post: []\n  },\n  extraReducers: {\n    // For Get Posts\n    [getPost.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [getPost.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.post = [action.payload];\n    },\n    [getPost.rejected]: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    // For Delete Posts\n    [deletePost.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [deletePost.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.post = [action.payload];\n    },\n    [deletePost.rejected]: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    // For Create Posts\n    [createPost.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [createPost.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.post = [action.payload];\n    },\n    [createPost.rejected]: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport default postSlice.reducer;","map":{"version":3,"sources":["E:/Assignments/React/Router/my-app/src/redux/features/postSlice.js"],"names":["createAsyncThunk","createSlice","json","getPost","id","fetch","then","res","deletePost","method","createPost","values","headers","Accept","body","JSON","stringify","title","postSlice","name","initialState","post","loading","error","extraReducers","pending","state","action","fulfilled","payload","rejected","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { json } from \"react-router-dom\";\r\n\r\n\r\n// for get posts\r\nexport const getPost = createAsyncThunk('post/getPosts',async({id})=>{\r\n    return fetch(`https://jsonplaceholder.typicode.com/posts/${id}`)\r\n    .then((res)=>res.json()\r\n    );\r\n})\r\n// For delete posts\r\nexport const deletePost = createAsyncThunk('post/deletePost',async({id})=>{\r\n    return fetch(`https://jsonplaceholder.typicode.com/posts/${id}`,{\r\n        method:'DELETE',\r\n    })\r\n    .then((res)=>res.json()\r\n    );\r\n})\r\n// For delete Create Post\r\nexport const createPost = createAsyncThunk('post/createPost',async({values})=>{\r\n    return fetch(`https://jsonplaceholder.typicode.com/posts`,{\r\n        method:'POST',\r\n        headers:{\r\n            Accept :\"application/json\",\r\n            \"Content-type\": \"application/json\"\r\n        },\r\n        body:JSON.stringify({\r\n            title : values.title,\r\n            body: values.body\r\n        })\r\n    })\r\n    .then((res)=>res.json()\r\n    );\r\n})\r\n\r\nconst postSlice = createSlice({\r\n    name: \"post\",\r\n    initialState: {\r\n      post: [],\r\n      loading: false,\r\n      error: null,\r\n      post:[]\r\n    },\r\n    extraReducers:{\r\n        // For Get Posts\r\n        [getPost.pending]:(state,action)=>{\r\n            state.loading = true;\r\n        },\r\n        [getPost.fulfilled]:(state,action)=>{\r\n            state.loading = false;\r\n            state.post = [action.payload]\r\n        },\r\n        [getPost.rejected]:(state,action)=>{\r\n            state.loading = false;\r\n            state.error = action.payload\r\n        },\r\n        // For Delete Posts\r\n        [deletePost.pending]:(state,action)=>{\r\n            state.loading = true;\r\n        },\r\n        [deletePost.fulfilled]:(state,action)=>{\r\n            state.loading = false;\r\n            state.post = [action.payload]\r\n        },\r\n        [deletePost.rejected]:(state,action)=>{\r\n            state.loading = false;\r\n            state.error = action.payload\r\n        },\r\n        // For Create Posts\r\n        [createPost.pending]:(state,action)=>{\r\n            state.loading = true;\r\n        },\r\n        [createPost.fulfilled]:(state,action)=>{\r\n            state.loading = false;\r\n            state.post = [action.payload]\r\n        },\r\n        [createPost.rejected]:(state,action)=>{\r\n            state.loading = false;\r\n            state.error = action.payload\r\n        },\r\n    }\r\n})\r\nexport default postSlice.reducer;"]},"metadata":{},"sourceType":"module"}