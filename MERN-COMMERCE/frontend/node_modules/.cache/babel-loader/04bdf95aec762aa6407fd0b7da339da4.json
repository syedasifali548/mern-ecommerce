{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { pubicRequest } from \"../requestMethods\"; // Get user from localStorage\n// const user = JSON.parse(localStorage.getItem('user'))\n\nconst initialState = {\n  user: null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: \"\"\n}; // Register user \n\nexport const register = createAsyncThunk(\"auth/register\", async (user, thunkAPI) => {\n  try {\n    return await pubicRequest.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isSuccess = false;\n      state.message = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["E:/Assignments/React/mern-ecommerce/frontend/src/redux/auth.js"],"names":["createAsyncThunk","createSlice","pubicRequest","initialState","user","isError","isSuccess","isLoading","message","register","thunkAPI","error","response","data","toString","rejectWithValue","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,YAAT,QAA6B,mBAA7B,C,CAGA;AACA;;AAEA,MAAMC,YAAY,GAAE;AAChBC,EAAAA,IAAI,EAAG,IADS;AAEhBC,EAAAA,OAAO,EAAG,KAFM;AAGhBC,EAAAA,SAAS,EAAG,KAHI;AAIhBC,EAAAA,SAAS,EAAG,KAJI;AAKhBC,EAAAA,OAAO,EAAG;AALM,CAApB,C,CAOA;;AAEA,OAAO,MAAMC,QAAQ,GAAGT,gBAAgB,CAAC,eAAD,EACxC,OAAMI,IAAN,EAAWM,QAAX,KAAsB;AAClB,MAAI;AACA,WAAO,MAAMR,YAAY,CAACO,QAAb,CAAsBL,IAAtB,CAAb;AACH,GAFD,CAEE,OAAOO,KAAP,EAAc;AACZ,UAAMH,OAAO,GACZG,KAAK,CAACC,QAAN,IACCD,KAAK,CAACC,QAAN,CAAeC,IADhB,IAECF,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBL,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACG,QAAN,EALA;AAMF,WAAOJ,QAAQ,CAACK,eAAT,CAAyBP,OAAzB,CAAP;AACD;AACJ,CAbuC,CAAjC;AAgBP,OAAO,MAAMQ,SAAS,GAAGf,WAAW,CAAC;AAClCgB,EAAAA,IAAI,EAAC,MAD6B;AAElCd,EAAAA,YAFkC;AAGlCe,EAAAA,QAAQ,EAAC;AACRC,IAAAA,KAAK,EAAEC,KAAD,IAAS;AACXA,MAAAA,KAAK,CAACb,SAAN,GAAkB,KAAlB;AACAa,MAAAA,KAAK,CAACd,SAAN,GAAkB,KAAlB;AACAc,MAAAA,KAAK,CAACd,SAAN,GAAkB,KAAlB;AACAc,MAAAA,KAAK,CAACZ,OAAN,GAAgB,EAAhB;AACH;AANO,GAHyB;AAWlCa,EAAAA,aAAa,EAAEC,OAAD,IAAW;AACxBA,IAAAA,OAAO,CACNC,OADD,CACSd,QAAQ,CAACe,OADlB,EAC4BJ,KAAD,IAAW;AACpCA,MAAAA,KAAK,CAACb,SAAN,GAAkB,IAAlB;AACD,KAHD,EAICgB,OAJD,CAISd,QAAQ,CAACgB,SAJlB,EAI6B,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAC9CN,MAAAA,KAAK,CAACb,SAAN,GAAkB,KAAlB;AACAa,MAAAA,KAAK,CAACd,SAAN,GAAkB,IAAlB;AACAc,MAAAA,KAAK,CAAChB,IAAN,GAAasB,MAAM,CAACC,OAApB;AACD,KARD,EASCJ,OATD,CASSd,QAAQ,CAACmB,QATlB,EAS4B,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAC7CN,MAAAA,KAAK,CAACb,SAAN,GAAkB,KAAlB;AACAa,MAAAA,KAAK,CAACf,OAAN,GAAgB,IAAhB;AACAe,MAAAA,KAAK,CAACZ,OAAN,GAAgBkB,MAAM,CAACC,OAAvB;AACAP,MAAAA,KAAK,CAAChB,IAAN,GAAa,IAAb;AACD,KAdD;AAeA;AA3BiC,CAAD,CAA7B;AA+BP,OAAO,MAAM;AAACe,EAAAA;AAAD,IAAUH,SAAS,CAACa,OAA1B;AACP,eAAeb,SAAS,CAACc,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\r\nimport { pubicRequest } from \"../requestMethods\"\r\n\r\n\r\n// Get user from localStorage\r\n// const user = JSON.parse(localStorage.getItem('user'))\r\n\r\nconst initialState ={\r\n    user : null,\r\n    isError : false,\r\n    isSuccess : false,\r\n    isLoading : false,\r\n    message : \"\"\r\n}\r\n// Register user \r\n\r\nexport const register = createAsyncThunk(\"auth/register\",\r\nasync(user,thunkAPI)=>{\r\n    try {\r\n        return await pubicRequest.register(user)\r\n    } catch (error) {\r\n        const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString()\r\n      return thunkAPI.rejectWithValue(message)\r\n    }\r\n}\r\n)\r\n\r\nexport const authSlice = createSlice({\r\n   name:\"auth\",\r\n   initialState,\r\n   reducers:{\r\n    reset:(state)=>{\r\n        state.isLoading = false;\r\n        state.isSuccess = false;\r\n        state.isSuccess = false;\r\n        state.message = \"\";\r\n    }\r\n   },\r\n   extraReducers:(builder)=>{\r\n    builder\r\n    .addCase(register.pending, (state) => {\r\n      state.isLoading = true\r\n    })\r\n    .addCase(register.fulfilled, (state, action) => {\r\n      state.isLoading = false\r\n      state.isSuccess = true\r\n      state.user = action.payload\r\n    })\r\n    .addCase(register.rejected, (state, action) => {\r\n      state.isLoading = false\r\n      state.isError = true\r\n      state.message = action.payload\r\n      state.user = null\r\n    })\r\n   },\r\n})\r\n\r\n\r\nexport const {reset} = authSlice.actions;\r\nexport default authSlice.reducer"]},"metadata":{},"sourceType":"module"}